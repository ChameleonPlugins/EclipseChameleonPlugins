//\\ //// code completion entries (1+ lines):
is like (a,) combination of fclose and fopen
//\\ //// ==> completion hint (1 line):
is like a combination of fclose and fopen
//\\ //// Replacement text (1+ lines):
FILE * freopen (X1, const char *opentype, FILE *stream)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1="filename.txt"

//\\ //// Help/documentation (1+ lines):
Function: FILE * freopen (const char *filename, const char *opentype, FILE *stream)
Preliminary:
| MT-Safe 
| AS-Unsafe corrupt
| AC-Unsafe corrupt fd
| See POSIX Safety Concepts.


This function is like a combination of fclose and fopen.
It first closes the stream referred to by stream, ignoring any
errors that are detected in the process.  (Because errors are ignored,
you should not use freopen on an output stream if you have
actually done any output using the stream.)  Then the file named by
filename is opened with mode opentype as for fopen,
and associated with the same stream object stream.

If the operation fails, a null pointer is returned; otherwise,
freopen returns stream.

freopen has traditionally been used to connect a standard stream
such as stdin with a file of your own choice.  This is useful in
programs in which use of a standard stream for certain purposes is
hard-coded.  In the GNU C Library, you can simply close the standard
streams and open new ones with fopen.  But other systems lack
this ability, so using freopen is more portable.

When the sources are compiling with _FILE_OFFSET_BITS == 64 on a
32 bit machine this function is in fact freopen64 since the LFS
interface replaces transparently the old interface.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Opening-Streams.html#Opening-Streams
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Opening-Streams/freopen.txt