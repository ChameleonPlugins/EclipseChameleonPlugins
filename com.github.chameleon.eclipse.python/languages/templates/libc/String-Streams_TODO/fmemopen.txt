//\\ //// code completion entries (1+ lines):
opens (a,) stream that allows (the,) access specified by (the,) opentype argument, that reads from or (output,print,show,say,type,write) to (the,) buffer specified by (the,) argument buf
//\\ //// ==> completion hint (1 line):
opens a stream that allows the access specified by the opentype argument, that reads from or writes to the buffer specified by the argument buf
//\\ //// Replacement text (1+ lines):
FILE * fmemopen (void *buf, size_t size, const char *opentype)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: FILE * fmemopen (void *buf, size_t size, const char *opentype)
Preliminary:
| MT-Safe 
| AS-Unsafe heap lock
| AC-Unsafe mem lock
| See POSIX Safety Concepts.


This function opens a stream that allows the access specified by the
opentype argument, that reads from or writes to the buffer specified
by the argument buf.  This array must be at least size bytes long.

If you specify a null pointer as the buf argument, fmemopen
dynamically allocates an array size bytes long (as with malloc;
see Unconstrained Allocation).  This is really only useful
if you are going to write things to the buffer and then read them back
in again, because you have no way of actually getting a pointer to the
buffer (for this, try open_memstream, below).  The buffer is
freed when the stream is closed.

The argument opentype is the same as in fopen
(see Opening Streams).  If the opentype specifies
append mode, then the initial file position is set to the first null
character in the buffer.  Otherwise the initial file position is at the
beginning of the buffer.

When a stream open for writing is flushed or closed, a null character
(zero byte) is written at the end of the buffer if it fits.  You
should add an extra byte to the size argument to account for this.
Attempts to write more than size bytes to the buffer result
in an error.

For a stream open for reading, null characters (zero bytes) in the
buffer do not count as “end of file”.  Read operations indicate end of
file only when the file position advances past size bytes.  So, if
you want to read characters from a null-terminated string, you should
supply the length of the string as the size argument.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//String-Streams.html#String-Streams
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/String-Streams/fmemopen.txt