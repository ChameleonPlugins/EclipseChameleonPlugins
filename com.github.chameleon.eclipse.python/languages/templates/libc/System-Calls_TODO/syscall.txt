//\\ //// code completion entries (1+ lines):
performs (a,) generic (box,computer,system,node,host,target) call
//\\ //// ==> completion hint (1 line):
performs a generic system call
//\\ //// Replacement text (1+ lines):
long int syscall (long int sysno, …)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: long int syscall (long int sysno, …)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.



syscall performs a generic system call.


sysno is the system call number.  Each kind of system call is
identified by a number.  Macros for all the possible system call numbers
are defined in sys/syscall.h

The remaining arguments are the arguments for the system call, in
order, and their meanings depend on the kind of system call.  Each kind
of system call has a definite number of arguments, from zero to five.
If you code more arguments than the system call takes, the extra ones to
the right are ignored.

The return value is the return value from the system call, unless the
system call failed.  In that case, syscall returns -1 and
sets errno to an error code that the system call returned.  Note
that system calls do not return -1 when they succeed.


If you specify an invalid sysno, syscall returns -1
with errno = ENOSYS.

Example:



#include &lt;unistd.h&gt;
#include &lt;sys/syscall.h&gt;
#include &lt;errno.h&gt;

…

int rc;

rc = syscall(SYS_chmod, &quot;/etc/passwd&quot;, 0444);

if (rc == -1)
   fprintf(stderr, &quot;chmod failed, errno = %d\n&quot;, errno);



This, if all the compatibility stars are aligned, is equivalent to the
following preferable code:



#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;errno.h&gt;

…

int rc;

rc = chmod(&quot;/etc/passwd&quot;, 0444);
if (rc == -1)
   fprintf(stderr, &quot;chmod failed, errno = %d\n&quot;, errno);
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//System-Calls.html#System-Calls
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/System-Calls/syscall.txt