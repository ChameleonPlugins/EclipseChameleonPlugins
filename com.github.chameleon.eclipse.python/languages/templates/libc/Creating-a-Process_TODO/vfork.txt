//\\ //// code completion entries (1+ lines):
is similar to fork but on some systems it is more efficient
//\\ //// ==> completion hint (1 line):
is similar to fork but on some systems it is more efficient
//\\ //// Replacement text (1+ lines):
pid_t vfork (void)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: pid_t vfork (void)
Preliminary:
| MT-Safe 
| AS-Unsafe plugin
| AC-Unsafe lock
| See POSIX Safety Concepts.


The vfork function is similar to fork but on some systems
it is more efficient; however, there are restrictions you must follow to
use it safely.

While fork makes a complete copy of the calling process’s address
space and allows both the parent and child to execute independently,
vfork does not make this copy.  Instead, the child process
created with vfork shares its parent’s address space until it
calls _exit or one of the exec functions.  In the
meantime, the parent process suspends execution.

You must be very careful not to allow the child process created with
vfork to modify any global data or even local variables shared
with the parent.  Furthermore, the child process cannot return from (or
do a long jump out of) the function that called vfork!  This
would leave the parent process’s control information very confused.  If
in doubt, use fork instead.

Some operating systems don’t really implement vfork.  The GNU C Library
permits you to use vfork on all systems, but actually
executes fork if vfork isn’t available.  If you follow
the proper precautions for using vfork, your program will still
work even if the system uses fork instead.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Creating-a-Process.html#Creating-a-Process
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Creating-a-Process/vfork.txt