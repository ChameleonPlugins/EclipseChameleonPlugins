//\\ //// code completion entries (1+ lines):
compares (the,) (string,text) s1 against s2, returning (a,) value that has (the,) same sign as (the,) difference between (the,) first differing pair of characters 
//\\ //// ==> completion hint (1 line):
compares the string s1 against s2, returning a value that has the same sign as the difference between the first differing pair of characters 
//\\ //// Replacement text (1+ lines):
int strcmp (X11, const char *s2)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1="dog"

//\\ //// Help/documentation (1+ lines):
Function: int strcmp (const char *s1, const char *s2)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The strcmp function compares the string s1 against
s2, returning a value that has the same sign as the difference
between the first differing pair of characters (interpreted as
unsigned char objects, then promoted to int).

If the two strings are equal, strcmp returns 0.

A consequence of the ordering used by strcmp is that if s1
is an initial substring of s2, then s1 is considered to be
“less than” s2.

strcmp does not take sorting conventions of the language the
strings are written in into account.  To get that one has to use
strcoll.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//String_002fArray-Comparison.html#String_002fArray-Comparison
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/String_002fArray-Comparison/strcmp.txt