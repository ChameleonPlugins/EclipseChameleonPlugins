//\\ //// code completion entries (1+ lines):
(allocate,find,get,grab,lock,obtain,reserve,retrieve,return) information about (the,) (box,computer,system,node,host,target) named name
//\\ //// ==> completion hint (1 line):
returns information about the host named name
//\\ //// Replacement text (1+ lines):
int gethostbyname_r (const char *restrict name, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int gethostbyname_r (const char *restrict name, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
Preliminary:
| MT-Safe env locale
| AS-Unsafe dlopen plugin corrupt heap lock
| AC-Unsafe lock corrupt mem fd
| See POSIX Safety Concepts.


The gethostbyname_r function returns information about the host
named name.  The caller must pass a pointer to an object of type
struct hostent in the result_buf parameter.  In addition
the function may need extra buffer space and the caller must pass an
pointer and the size of the buffer in the buf and buflen
parameters.

A pointer to the buffer, in which the result is stored, is available in
*result after the function call successfully returned.  The
buffer passed as the buf parameter can be freed only once the caller
has finished with the result hostent struct, or has copied it including all
the other memory that it points to.  If an error occurs or if no entry is
found, the pointer *result is a null pointer.  Success is
signalled by a zero return value.  If the function failed the return value
is an error number.  In addition to the errors defined for
gethostbyname it can also be ERANGE.  In this case the call
should be repeated with a larger buffer.  Additional error information is
not stored in the global variable h_errno but instead in the object
pointed to by h_errnop.

Here’s a small example:

struct hostent *
gethostname (char *host)
{
  struct hostent *hostbuf, *hp;
  size_t hstbuflen;
  char *tmphstbuf;
  int res;
  int herr;

  hostbuf = malloc (sizeof (struct hostent));
  hstbuflen = 1024;
  tmphstbuf = malloc (hstbuflen);

  while ((res = gethostbyname_r (host, hostbuf, tmphstbuf, hstbuflen,
                                 &amp;hp, &amp;herr)) == ERANGE)
    {
      /* Enlarge the buffer.  */
      hstbuflen *= 2;
      tmphstbuf = realloc (tmphstbuf, hstbuflen);
    }

  free (tmphstbuf);
  /*  Check for errors.  */
  if (res || hp == NULL)
    return NULL;
  return hp;
}
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Host-Names.html#Host-Names
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Host-Names/gethostbyname_r.txt