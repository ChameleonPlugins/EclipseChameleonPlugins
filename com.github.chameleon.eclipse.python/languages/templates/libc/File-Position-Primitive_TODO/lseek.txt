//\\ //// code completion entries (1+ lines):
is used to (convert,change,replace) (the,) file (place,position) of (the,) file with descriptor X:FILEDESCRIPTOR
//\\ //// ==> completion hint (1 line):
is used to change the file position of the file with descriptor filedes
//\\ //// Replacement text (1+ lines):
off_t lseek (X1, X2, int whence)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1=fd
X2=0

//\\ //// Help/documentation (1+ lines):
Function: off_t lseek (int filedes, off_t offset, int whence)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The lseek function is used to change the file position of the
file with descriptor filedes.

The whence argument specifies how the offset should be
interpreted, in the same way as for the fseek function, and it must
be one of the symbolic constants SEEK_SET, SEEK_CUR, or
SEEK_END.


SEEK_SET
Specifies that offset is a count of characters from the beginning
of the file.


SEEK_CUR
Specifies that offset is a count of characters from the current
file position.  This count may be positive or negative.


SEEK_END
Specifies that offset is a count of characters from the end of
the file.  A negative count specifies a position within the current
extent of the file; a positive count specifies a position past the
current end.  If you set the position past the current end, and
actually write data, you will extend the file with zeros up to that
position.



The return value from lseek is normally the resulting file
position, measured in bytes from the beginning of the file.
You can use this feature together with SEEK_CUR to read the
current file position.

If you want to append to the file, setting the file position to the
current end of file with SEEK_END is not sufficient.  Another
process may write more data after you seek but before you write,
extending the file so the position you write onto clobbers their data.
Instead, use the O_APPEND operating mode; see Operating Modes.

You can set the file position past the current end of the file.  This
does not by itself make the file longer; lseek never changes the
file.  But subsequent output at that position will extend the file.
Characters between the previous end of file and the new position are
filled with zeros.  Extending the file in this way can create a
“hole”: the blocks of zeros are not actually allocated on disk, so the
file takes up less space than it appears to; it is then called a
“sparse file”.



If the file position cannot be changed, or the operation is in some way
invalid, lseek returns a value of -1.  The following
errno error conditions are defined for this function:


EBADF
The filedes is not a valid file descriptor.


EINVAL
The whence argument value is not valid, or the resulting
file offset is not valid.  A file offset is invalid.


ESPIPE
The filedes corresponds to an object that cannot be positioned,
such as a pipe, FIFO or terminal device.  (POSIX.1 specifies this error
only for pipes and FIFOs, but on GNU systems, you always get
ESPIPE if the object is not seekable.)



When the source file is compiled with _FILE_OFFSET_BITS == 64 the
lseek function is in fact lseek64 and the type
off_t has 64 bits which makes it possible to handle files up to
2^63 bytes in length.

This function is a cancellation point in multi-threaded programs.  This
is a problem if the thread allocates some resources (like memory, file
descriptors, semaphores or whatever) at the time lseek is
called.  If the thread gets canceled these resources stay allocated
until the program ends.  To avoid this calls to lseek should be
protected using cancellation handlers.

The lseek function is the underlying primitive for the
fseek, fseeko, ftell, ftello and
rewind functions, which operate on streams instead of file
descriptors.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//File-Position-Primitive.html#File-Position-Primitive
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/File-Position-Primitive/lseek.txt