//\\ //// code completion entries (1+ lines):
note that (the,) argument order does not match that of (the,) corresponding two-argument functions, so that in all of these probes (the,) user-requested allocation size is in $arg1
//\\ //// ==> completion hint (1 line):
Note that the argument order does not match that of the corresponding two-argument functions, so that in all of these probes the user-requested allocation size is in $arg1
//\\ //// Replacement text (1+ lines):
Probe: memory_malloc_retry (size_t $arg1)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Probe: memory_malloc_retry (size_t $arg1)
Probe: memory_realloc_retry (size_t $arg1, void *$arg2)
Probe: memory_memalign_retry (size_t $arg1, size_t $arg2)
Probe: memory_calloc_retry (size_t $arg1)
These probes are triggered when the corresponding functions fail to
obtain the requested amount of memory from the arena in use, before they
call arena_get_retry to select an alternate arena in which to
retry the allocation.  Argument $arg1 is the amount of memory
requested by the user; in the calloc case, that is the total size
computed from both function arguments.  In the realloc case,
$arg2 is the pointer to the memory area being resized.  In the
memalign case, $arg2 is the alignment to be used for the
request, which may be stricter than the value passed to the
memalign function.  A memalign probe is also used by functions
posix_memalign, valloc and pvalloc.

Note that the argument order does not match that of the
corresponding two-argument functions, so that in all of these probes the
user-requested allocation size is in $arg1.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Memory-Allocation-Probes.html#Memory-Allocation-Probes
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Memory-Allocation-Probes/memory_memalign_retry.txt