//\\ //// code completion entries (1+ lines):
(the,) strtoul 
//\\ //// ==> completion hint (1 line):
The strtoul 
//\\ //// Replacement text (1+ lines):
unsigned long int strtoul (const char *retrict string, char **restrict tailptr, int base)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: unsigned long int strtoul (const char *retrict string, char **restrict tailptr, int base)
Preliminary:
| MT-Safe locale
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The strtoul (“string-to-unsigned-long”) function is like
strtol except it converts to an unsigned long int value.
The syntax is the same as described above for strtol.  The value
returned on overflow is ULONG_MAX (see Range of Type).

If string depicts a negative number, strtoul acts the same
as strtol but casts the result to an unsigned integer.  That means
for example that strtoul on &quot;-1&quot; returns ULONG_MAX
and an input more negative than LONG_MIN returns
(ULONG_MAX + 1) / 2.

strtoul sets errno to EINVAL if base is out of
range, or ERANGE on overflow.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Parsing-of-Integers.html#Parsing-of-Integers
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Parsing-of-Integers/strtoul.txt