//\\ //// code completion entries (1+ lines):
behaves exactly like (the,) random function except that it uses and modifies (the,) state in (the,) object pointed to by (the,) first parameter instead of (the,) global state
//\\ //// ==> completion hint (1 line):
behaves exactly like the random function except that it uses and modifies the state in the object pointed to by the first parameter instead of the global state
//\\ //// Replacement text (1+ lines):
int random_r (struct random_data *restrict buf, int32_t *restrict result)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int random_r (struct random_data *restrict buf, int32_t *restrict result)
Preliminary:
| MT-Safe race:buf
| AS-Safe 
| AC-Unsafe corrupt
| See POSIX Safety Concepts.


The random_r function behaves exactly like the random
function except that it uses and modifies the state in the object
pointed to by the first parameter instead of the global state.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//BSD-Random.html#BSD-Random
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/BSD-Random/random_r.txt