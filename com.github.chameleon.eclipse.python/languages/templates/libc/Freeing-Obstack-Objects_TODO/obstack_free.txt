//\\ //// code completion entries (1+ lines):
if object is (a,) null pointer, everything allocated in (the,) obstack is freed
//\\ //// ==> completion hint (1 line):
If object is a null pointer, everything allocated in the obstack is freed
//\\ //// Replacement text (1+ lines):
void obstack_free (struct obstack *obstack-ptr, void *object)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: void obstack_free (struct obstack *obstack-ptr, void *object)
Preliminary:
| MT-Safe race:obstack-ptr
| AS-Safe 
| AC-Unsafe corrupt
| See POSIX Safety Concepts.


If object is a null pointer, everything allocated in the obstack
is freed.  Otherwise, object must be the address of an object
allocated in the obstack.  Then object is freed, along with
everything allocated in obstack since object.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Freeing-Obstack-Objects.html#Freeing-Obstack-Objects
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Freeing-Obstack-Objects/obstack_free.txt