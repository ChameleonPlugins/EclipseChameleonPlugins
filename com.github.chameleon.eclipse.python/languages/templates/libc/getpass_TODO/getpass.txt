//\\ //// code completion entries (1+ lines):
(output,print,show,say,type,write) prompt, then reads (a,) (string,text) in from (the,) terminal without echoing it
//\\ //// ==> completion hint (1 line):
outputs prompt, then reads a string in from the terminal without echoing it
//\\ //// Replacement text (1+ lines):
char * getpass (const char *prompt)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: char * getpass (const char *prompt)
Preliminary:
| MT-Unsafe term
| AS-Unsafe heap lock corrupt
| AC-Unsafe term lock corrupt
| See POSIX Safety Concepts.



getpass outputs prompt, then reads a string in from the
terminal without echoing it.  It tries to connect to the real terminal,
/dev/tty, if possible, to encourage users not to put plaintext
passwords in files; otherwise, it uses stdin and stderr.
getpass also disables the INTR, QUIT, and SUSP characters on the
terminal using the ISIG terminal attribute (see Local Modes).
The terminal is flushed before and after getpass, so that
characters of a mistyped password are not accidentally visible.

In other C libraries, getpass may only return the first
PASS_MAX bytes of a password.  The GNU C Library has no limit, so
PASS_MAX is undefined.

The prototype for this function is in unistd.h.  PASS_MAX
would be defined in limits.h.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//getpass.html#getpass
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/getpass/getpass.txt