//\\ //// code completion entries (1+ lines):
(allocate,find,get,grab,lock,obtain,reserve,retrieve,return) information about (the,) attributes of (the,) file named by X:FILENAME /@w in (the,) structure pointed to by buf
//\\ //// ==> completion hint (1 line):
returns information about the attributes of the file named by filename /@w in the structure pointed to by buf
//\\ //// Replacement text (1+ lines):
int stat (X1, struct stat *buf)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1="filename.txt"

//\\ //// Help/documentation (1+ lines):
Function: int stat (const char *filename, struct stat *buf)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The stat function returns information about the attributes of the
file named by filename in the structure pointed to by buf.

If filename is the name of a symbolic link, the attributes you get
describe the file that the link points to.  If the link points to a
nonexistent file name, then stat fails reporting a nonexistent
file.

The return value is 0 if the operation is successful, or
-1 on failure.  In addition to the usual file name errors
(see File Name Errors, the following errno error conditions
are defined for this function:


ENOENT
The file named by filename doesn’t exist.



When the sources are compiled with _FILE_OFFSET_BITS == 64 this
function is in fact stat64 since the LFS interface transparently
replaces the normal implementation.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Reading-Attributes.html#Reading-Attributes
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Reading-Attributes/stat.txt