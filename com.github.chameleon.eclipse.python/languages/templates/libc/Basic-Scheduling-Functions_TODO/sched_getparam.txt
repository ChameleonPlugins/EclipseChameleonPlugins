//\\ //// code completion entries (1+ lines):
(allocate,find,get,grab,lock,obtain,reserve,retrieve,return) (a,) process’ absolute priority
//\\ //// ==> completion hint (1 line):
returns a process’ absolute priority
//\\ //// Replacement text (1+ lines):
int sched_getparam (pid_t pid, struct sched_param *param)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int sched_getparam (pid_t pid, struct sched_param *param)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.



This function returns a process’ absolute priority.

pid is the Process ID (pid) of the process whose absolute priority
you want to know.

param is a pointer to a structure in which the function stores the
absolute priority of the process.

On success, the return value is 0.  Otherwise, it is -1
and ERRNO is set accordingly.  The errno values specific
to this function are:


ESRCH
There is no process with pid pid and it is not zero.


EINVAL
pid is negative.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Basic-Scheduling-Functions.html#Basic-Scheduling-Functions
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Basic-Scheduling-Functions/sched_getparam.txt