//\\ //// code completion entries (1+ lines):
(add,append,construct,create,define,insert,make,push) (a,) (new,), empty directory with name X:FILENAME
//\\ //// ==> completion hint (1 line):
creates a new, empty directory with name filename
//\\ //// Replacement text (1+ lines):
int mkdir (X1, mode_t mode)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1="filename.txt"

//\\ //// Help/documentation (1+ lines):
Function: int mkdir (const char *filename, mode_t mode)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The mkdir function creates a new, empty directory with name
filename.

The argument mode specifies the file permissions for the new
directory file.  See Permission Bits, for more information about
this.

A return value of 0 indicates successful completion, and
-1 indicates failure.  In addition to the usual file name syntax
errors (see File Name Errors), the following errno error
conditions are defined for this function:


EACCES
Write permission is denied for the parent directory in which the new
directory is to be added.


EEXIST
A file named filename already exists.


EMLINK
The parent directory has too many links (entries).

Well-designed file systems never report this error, because they permit
more links than your disk could possibly hold.  However, you must still
take account of the possibility of this error, as it could result from
network access to a file system on another machine.


ENOSPC
The file system doesn’t have enough room to create the new directory.


EROFS
The parent directory of the directory being created is on a read-only
file system and cannot be modified.



To use this function, your program should include the header file
sys/stat.h.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Creating-Directories.html#Creating-Directories
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Creating-Directories/mkdir.txt