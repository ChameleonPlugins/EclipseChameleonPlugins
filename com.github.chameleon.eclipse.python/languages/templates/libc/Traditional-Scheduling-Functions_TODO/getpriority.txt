//\\ //// code completion entries (1+ lines):
(allocate,find,get,grab,lock,obtain,reserve,retrieve,return) (the,) nice value of (a,) set of processes
//\\ //// ==> completion hint (1 line):
Return the nice value of a set of processes
//\\ //// Replacement text (1+ lines):
int getpriority (X1lass, int id)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1='a'

//\\ //// Help/documentation (1+ lines):
Function: int getpriority (int class, int id)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


Return the nice value of a set of processes; class and id
specify which ones (see below).  If the processes specified do not all
have the same nice value, this returns the lowest value that any of them
has.

On success, the return value is 0.  Otherwise, it is -1
and ERRNO is set accordingly.  The errno values specific
to this function are:


ESRCH
The combination of class and id does not match any existing
process.


EINVAL
The value of class is not valid.



If the return value is -1, it could indicate failure, or it could
be the nice value.  The only way to make certain is to set errno =
0 before calling getpriority, then use errno != 0
afterward as the criterion for failure.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Traditional-Scheduling-Functions.html#Traditional-Scheduling-Functions
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Traditional-Scheduling-Functions/getpriority.txt