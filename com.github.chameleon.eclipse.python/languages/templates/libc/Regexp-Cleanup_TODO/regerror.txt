//\\ //// code completion entries (1+ lines):
produces (an,) error message (string,text) for (the,) error code errcode, and stores (the,) (string,text) in X:LENGTH bytes of memory starting at buffer
//\\ //// ==> completion hint (1 line):
produces an error message string for the error code errcode, and stores the string in length bytes of memory starting at buffer
//\\ //// Replacement text (1+ lines):
size_t size=regerror (int errcode, const regex_t *restrict compiled, char *restrict buffer, X4)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X4=256

//\\ //// Help/documentation (1+ lines):
Function: size_t regerror (int errcode, const regex_t *restrict compiled, char *restrict buffer, size_t length)
Preliminary:
| MT-Safe env
| AS-Unsafe corrupt heap lock dlopen
| AC-Unsafe corrupt lock fd mem
| See POSIX Safety Concepts.


This function produces an error message string for the error code
errcode, and stores the string in length bytes of memory
starting at buffer.  For the compiled argument, supply the
same compiled regular expression structure that regcomp or
regexec was working with when it got the error.  Alternatively,
you can supply NULL for compiled; you will still get a
meaningful error message, but it might not be as detailed.

If the error message can’t fit in length bytes (including a
terminating null character), then regerror truncates it.
The string that regerror stores is always null-terminated
even if it has been truncated.

The return value of regerror is the minimum length needed to
store the entire error message.  If this is less than length, then
the error message was not truncated, and you can use it.  Otherwise, you
should call regerror again with a larger buffer.

Here is a function which uses regerror, but always dynamically
allocates a buffer for the error message:


char *get_regerror (int errcode, regex_t *compiled)
{
  size_t length = regerror (errcode, compiled, NULL, 0);
  char *buffer = xmalloc (length);
  (void) regerror (errcode, compiled, buffer, length);
  return buffer;
}
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Regexp-Cleanup.html#Regexp-Cleanup
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Regexp-Cleanup/regerror.txt