//\\ //// code completion entries (1+ lines):
most programs have no reason to handle sigcont
//\\ //// ==> completion hint (1 line):
Most programs have no reason to handle SIGCONT
//\\ //// Replacement text (1+ lines):
Macro: int SIGCONT
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Macro: int SIGCONT

You can send a SIGCONT signal to a process to make it continue.
This signal is special—it always makes the process continue if it is
stopped, before the signal is delivered.  The default behavior is to do
nothing else.  You cannot block this signal.  You can set a handler, but
SIGCONT always makes the process continue regardless.

Most programs have no reason to handle SIGCONT; they simply
resume execution without realizing they were ever stopped.  You can use
a handler for SIGCONT to make a program do something special when
it is stopped and continued—for example, to reprint a prompt when it
is suspended while waiting for input.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Job-Control-Signals.html#Job-Control-Signals
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Job-Control-Signals/SIGCONT.txt