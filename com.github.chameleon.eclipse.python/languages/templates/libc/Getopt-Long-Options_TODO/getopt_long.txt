//\\ //// code completion entries (1+ lines):
decode options from (the,) vector argv 
//\\ //// ==> completion hint (1 line):
Decode options from the vector argv 
//\\ //// Replacement text (1+ lines):
int getopt_long (int argc, char *const *argv, X1hortopts, const struct option *longopts, int *indexptr)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1="dog"

//\\ //// Help/documentation (1+ lines):
Function: int getopt_long (int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr)
Preliminary:
| MT-Unsafe race:getopt env
| AS-Unsafe heap i18n lock corrupt
| AC-Unsafe mem lock corrupt
| See POSIX Safety Concepts.


Decode options from the vector argv (whose length is argc).
The argument shortopts describes the short options to accept, just as
it does in getopt.  The argument longopts describes the long
options to accept (see above).

When getopt_long encounters a short option, it does the same
thing that getopt would do: it returns the character code for the
option, and stores the options argument (if it has one) in optarg.

When getopt_long encounters a long option, it takes actions based
on the flag and val fields of the definition of that
option.

If flag is a null pointer, then getopt_long returns the
contents of val to indicate which option it found.  You should
arrange distinct values in the val field for options with
different meanings, so you can decode these values after
getopt_long returns.  If the long option is equivalent to a short
option, you can use the short option’s character code in val.

If flag is not a null pointer, that means this option should just
set a flag in the program.  The flag is a variable of type int
that you define.  Put the address of the flag in the flag field.
Put in the val field the value you would like this option to
store in the flag.  In this case, getopt_long returns 0.

For any long option, getopt_long tells you the index in the array
longopts of the options definition, by storing it into
*indexptr.  You can get the name of the option with
longopts[*indexptr].name.  So you can distinguish among
long options either by the values in their val fields or by their
indices.  You can also distinguish in this way among long options that
set flags.

When a long option has an argument, getopt_long puts the argument
value in the variable optarg before returning.  When the option
has no argument, the value in optarg is a null pointer.  This is
how you can tell whether an optional argument was supplied.

When getopt_long has no more options to handle, it returns
-1, and leaves in the variable optind the index in
argv of the next remaining argument.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Getopt-Long-Options.html#Getopt-Long-Options
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Getopt-Long-Options/getopt_long.txt