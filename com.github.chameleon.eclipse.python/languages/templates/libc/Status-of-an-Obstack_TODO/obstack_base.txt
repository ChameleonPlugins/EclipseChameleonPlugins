//\\ //// code completion entries (1+ lines):
(allocate,find,get,grab,lock,obtain,reserve,retrieve,return) (the,) tentative address of (the,) beginning of (the,) currently growing object in obstack-ptr
//\\ //// ==> completion hint (1 line):
returns the tentative address of the beginning of the currently growing object in obstack-ptr
//\\ //// Replacement text (1+ lines):
struct utsname *buf;
buf = obstack_base (struct obstack *obstack-ptr)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: void * obstack_base (struct obstack *obstack-ptr)
Preliminary:
| MT-Safe 
| AS-Unsafe corrupt
| AC-Safe 
| See POSIX Safety Concepts.


This function returns the tentative address of the beginning of the
currently growing object in obstack-ptr.  If you finish the object
immediately, it will have that address.  If you make it larger first, it
may outgrow the current chunk—then its address will change!

If no object is growing, this value says where the next object you
allocate will start (once again assuming it fits in the current
chunk).
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Status-of-an-Obstack.html#Status-of-an-Obstack
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Status-of-an-Obstack/obstack_base.txt