//\\ //// code completion entries (1+ lines):
is similar to (the,) aio_write function
//\\ //// ==> completion hint (1 line):
is similar to the aio_write function
//\\ //// Replacement text (1+ lines):
int aio_write64 (struct aiocb64 *aiocbp)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int aio_write64 (struct aiocb64 *aiocbp)
Preliminary:
| MT-Safe 
| AS-Unsafe lock heap
| AC-Unsafe lock mem
| See POSIX Safety Concepts.


This function is similar to the aio_write function.  The only
difference is that on 32 bit machines the file descriptor should
be opened in the large file mode.  Internally aio_write64 uses
functionality equivalent to lseek64 (see File Position Primitive) to position the file descriptor correctly for the writing,
as opposed to lseek functionality used in aio_write.

When the sources are compiled with _FILE_OFFSET_BITS == 64, this
function is available under the name aio_write and so transparently
replaces the interface for small files on 32 bit machines.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Asynchronous-Reads_002fWrites.html#Asynchronous-Reads_002fWrites
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Asynchronous-Reads_002fWrites/aio_write64.txt