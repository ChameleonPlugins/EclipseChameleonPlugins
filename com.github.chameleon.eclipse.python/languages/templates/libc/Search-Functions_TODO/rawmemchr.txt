//\\ //// code completion entries (1+ lines):
often (the,) memchr function is used with (the,) knowledge that (the,) byte X:CHARACTER is available in (the,) memory block specified by (the,) parameters
//\\ //// ==> completion hint (1 line):
Often the memchr function is used with the knowledge that the byte c is available in the memory block specified by the parameters
//\\ //// Replacement text (1+ lines):
struct utsname *buf;
buf = rawmemchr (const void *block, X2)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X2='a'

//\\ //// Help/documentation (1+ lines):
Function: void * rawmemchr (const void *block, int c)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


Often the memchr function is used with the knowledge that the
byte c is available in the memory block specified by the
parameters.  But this means that the size parameter is not really
needed and that the tests performed with it at runtime (to check whether
the end of the block is reached) are not needed.

The rawmemchr function exists for just this situation which is
surprisingly frequent.  The interface is similar to memchr except
that the size parameter is missing.  The function will look beyond
the end of the block pointed to by block in case the programmer
made an error in assuming that the byte c is present in the block.
In this case the result is unspecified.  Otherwise the return value is a
pointer to the located byte.

This function is of special interest when looking for the end of a
string.  Since all strings are terminated by a null byte a call like


   rawmemchr (str, '\0')


will never go beyond the end of the string.

This function is a GNU extension.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Search-Functions.html#Search-Functions
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Search-Functions/rawmemchr.txt