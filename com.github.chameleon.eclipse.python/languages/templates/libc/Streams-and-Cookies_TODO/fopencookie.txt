//\\ //// code completion entries (1+ lines):
actually (add,append,construct,create,define,insert,make,push) (the,) stream for communicating with (the,) cookie using (the,) functions in (the,) io-functions argument
//\\ //// ==> completion hint (1 line):
actually creates the stream for communicating with the cookie using the functions in the io-functions argument
//\\ //// Replacement text (1+ lines):
FILE * fopencookie (void *cookie, const char *opentype, cookie_io_functions_t io-functions)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: FILE * fopencookie (void *cookie, const char *opentype, cookie_io_functions_t io-functions)
Preliminary:
| MT-Safe 
| AS-Unsafe heap lock
| AC-Unsafe mem lock
| See POSIX Safety Concepts.


This function actually creates the stream for communicating with the
cookie using the functions in the io-functions argument.
The opentype argument is interpreted as for fopen;
see Opening Streams.  (But note that the “truncate on
open” option is ignored.)  The new stream is fully buffered.

The fopencookie function returns the newly created stream, or a null
pointer in case of an error.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Streams-and-Cookies.html#Streams-and-Cookies
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Streams-and-Cookies/fopencookie.txt