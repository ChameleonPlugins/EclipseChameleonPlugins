//\\ //// code completion entries (1+ lines):
has (a,) similar functionality as strtok_r with (the,) newstring argument replaced by (the,) save_ptr argument
//\\ //// ==> completion hint (1 line):
has a similar functionality as strtok_r with the newstring argument replaced by the save_ptr argument
//\\ //// Replacement text (1+ lines):
char * strsep (char **string_ptr, const char *delimiter)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: char * strsep (char **string_ptr, const char *delimiter)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


This function has a similar functionality as strtok_r with the
newstring argument replaced by the save_ptr argument.  The
initialization of the moving pointer has to be done by the user.
Successive calls to strsep move the pointer along the tokens
separated by delimiter, returning the address of the next token
and updating string_ptr to point to the beginning of the next
token.

One difference between strsep and strtok_r is that if the
input string contains more than one character from delimiter in a
row strsep returns an empty string for each pair of characters
from delimiter.  This means that a program normally should test
for strsep returning an empty string before processing it.

This function was introduced in 4.3BSD and therefore is widely available.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Finding-Tokens-in-a-String.html#Finding-Tokens-in-a-String
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Finding-Tokens-in-a-String/strsep.txt