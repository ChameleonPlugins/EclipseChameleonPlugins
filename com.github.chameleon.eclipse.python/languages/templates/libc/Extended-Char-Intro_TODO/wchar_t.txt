//\\ //// code completion entries (1+ lines):
(the,) iso c90 /@w standard, where wchar_t was introduced, does not (output,print,show,say,type,write) anything specific about (the,) representation
//\\ //// ==> completion hint (1 line):
The ISO C90 /@w standard, where wchar_t was introduced, does not say anything specific about the representation
//\\ //// Replacement text (1+ lines):
Data type: wchar_t
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Data type: wchar_t
This data type is used as the base type for wide character strings.
In other words, arrays of objects of this type are the equivalent of
char[] for multibyte character strings.  The type is defined in
stddef.h.

The ISO C90 standard, where wchar_t was introduced, does not
say anything specific about the representation.  It only requires that
this type is capable of storing all elements of the basic character set.
Therefore it would be legitimate to define wchar_t as char,
which might make sense for embedded systems.

But in the GNU C Library wchar_t is always 32 bits wide and, therefore,
capable of representing all UCS-4 values and, therefore, covering all of
ISO 10646.  Some Unix systems define wchar_t as a 16-bit type
and thereby follow Unicode very strictly.  This definition is perfectly
fine with the standard, but it also means that to represent all
characters from Unicode and ISO 10646 one has to use UTF-16 surrogate
characters, which is in fact a multi-wide-character encoding.  But
resorting to multi-wide-character encoding contradicts the purpose of the
wchar_t type.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Extended-Char-Intro.html#Extended-Char-Intro
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Extended-Char-Intro/wchar_t.txt