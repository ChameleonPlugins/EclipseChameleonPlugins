//\\ //// code completion entries (1+ lines):
is nearly identical to (the,) memcpy function
//\\ //// ==> completion hint (1 line):
is nearly identical to the memcpy function
//\\ //// Replacement text (1+ lines):
struct utsname *buf;
buf = mempcpy (void *restrict to, const void *restrict from, size_t size)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: void * mempcpy (void *restrict to, const void *restrict from, size_t size)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The mempcpy function is nearly identical to the memcpy
function.  It copies size bytes from the object beginning at
from into the object pointed to by to.  But instead of
returning the value of to it returns a pointer to the byte
following the last written byte in the object beginning at to.
I.e., the value is ((void *) ((char *) to + size)).

This function is useful in situations where a number of objects shall be
copied to consecutive memory positions.


void *
combine (void *o1, size_t s1, void *o2, size_t s2)
{
  void *result = malloc (s1 + s2);
  if (result != NULL)
    mempcpy (mempcpy (result, o1, s1), o2, s2);
  return result;
}


This function is a GNU extension.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Copying-and-Concatenation.html#Copying-and-Concatenation
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Copying-and-Concatenation/mempcpy.txt