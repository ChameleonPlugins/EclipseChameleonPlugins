//\\ //// code completion entries (1+ lines):
is like wcscat except that not more than size characters from from are appended to (the,) (end,exit,quit,(halt,pause,stop,suspend)) of to
//\\ //// ==> completion hint (1 line):
is like wcscat except that not more than size characters from from are appended to the end of to
//\\ //// Replacement text (1+ lines):
wchar_t * wcsncat (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: wchar_t * wcsncat (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


This function is like wcscat except that not more than size
characters from from are appended to the end of to.  A
single null character is also always appended to to, so the total
allocated size of to must be at least size + 1 bytes
longer than its initial length.

The wcsncat function could be implemented like this:


wchar_t *
wcsncat (wchar_t *restrict wto, const wchar_t *restrict wfrom,
         size_t size)
{
  memcpy (wto + wcslen (wto), wfrom, wcsnlen (wfrom, size) * sizeof (wchar_t));
  wto[wcslen (to) + wcsnlen (wfrom, size)] = '\0';
  return wto;
}


The behavior of wcsncat is undefined if the strings overlap.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Copying-and-Concatenation.html#Copying-and-Concatenation
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Copying-and-Concatenation/wcsncat.txt