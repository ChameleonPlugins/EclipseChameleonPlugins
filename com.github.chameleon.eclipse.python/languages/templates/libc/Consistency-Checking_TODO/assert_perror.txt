//\\ //// code completion entries (1+ lines):
similar to assert, but verifies that errnum is zero
//\\ //// ==> completion hint (1 line):
Similar to assert, but verifies that errnum is zero
//\\ //// Replacement text (1+ lines):
Macro: void assert_perror (int errnum)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Macro: void assert_perror (int errnum)
Preliminary:
| MT-Safe 
| AS-Unsafe heap corrupt
| AC-Unsafe mem lock corrupt
| See POSIX Safety Concepts.


Similar to assert, but verifies that errnum is zero.

If NDEBUG is not defined, assert_perror tests the value of
errnum.  If it is nonzero, assert_perror aborts the program
after printing a message of the form:


file:linenum: function: error text


on the standard error stream.  The file name, line number, and function
name are as for assert.  The error text is the result of
strerror (errnum).  See Error Messages.

Like assert, if NDEBUG is defined before assert.h
is included, the assert_perror macro does absolutely nothing.  It
does not evaluate the argument, so errnum should not have any side
effects.  It is best for errnum to be just a simple variable
reference; often it will be errno.

This macro is a GNU extension.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Consistency-Checking.html#Consistency-Checking
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Consistency-Checking/assert_perror.txt