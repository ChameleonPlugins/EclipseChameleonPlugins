//\\ //// code completion entries (1+ lines):
is very similar to (the,) error function
//\\ //// ==> completion hint (1 line):
is very similar to the error function
//\\ //// Replacement text (1+ lines):
void error_at_line (int status, int errnum, const char *fname, unsigned int lineno, const char *format, …)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: void error_at_line (int status, int errnum, const char *fname, unsigned int lineno, const char *format, …)
Preliminary:
| MT-Unsafe race:error_at_line/error_one_per_line locale
| AS-Unsafe corrupt heap i18n
| AC-Unsafe corrupt/error_one_per_line
| See POSIX Safety Concepts.



The error_at_line function is very similar to the error
function.  The only difference are the additional parameters fname
and lineno.  The handling of the other parameters is identical to
that of error except that between the program name and the string
generated by the format string additional text is inserted.

Directly following the program name a colon, followed by the file name
pointer to by fname, another colon, and a value of lineno is
printed.

This additional output of course is meant to be used to locate an error
in an input file (like a programming language source code file etc).

If the global variable error_one_per_line is set to a non-zero
value error_at_line will avoid printing consecutive messages for
the same file and line.  Repetition which are not directly following
each other are not caught.

Just like error this function only returned if status is
zero.  Otherwise exit is called with the non-zero value.  If
error returns the global variable error_message_count is
incremented by one to keep track of the number of errors reported.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Error-Messages.html#Error-Messages
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Error-Messages/error_at_line.txt