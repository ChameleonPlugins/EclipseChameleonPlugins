//\\ //// code completion entries (1+ lines):
reads up to size bytes from (the,) file with descriptor X:FILEDESCRIPTOR, storing (the,) results in (the,) buffer
//\\ //// ==> completion hint (1 line):
reads up to size bytes from the file with descriptor filedes, storing the results in the buffer
//\\ //// Replacement text (1+ lines):
ssize_t read (X1, void *buffer, size_t size)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1=fd

//\\ //// Help/documentation (1+ lines):
Function: ssize_t read (int filedes, void *buffer, size_t size)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


The read function reads up to size bytes from the file
with descriptor filedes, storing the results in the buffer.
(This is not necessarily a character string, and no terminating null
character is added.)


The return value is the number of bytes actually read.  This might be
less than size; for example, if there aren’t that many bytes left
in the file or if there aren’t that many bytes immediately available.
The exact behavior depends on what kind of file it is.  Note that
reading less than size bytes is not an error.

A value of zero indicates end-of-file (except if the value of the
size argument is also zero).  This is not considered an error.
If you keep calling read while at end-of-file, it will keep
returning zero and doing nothing else.

If read returns at least one character, there is no way you can
tell whether end-of-file was reached.  But if you did reach the end, the
next read will return zero.

In case of an error, read returns -1.  The following
errno error conditions are defined for this function:


EAGAIN
Normally, when no input is immediately available, read waits for
some input.  But if the O_NONBLOCK flag is set for the file
(see File Status Flags), read returns immediately without
reading any data, and reports this error.

Compatibility Note: Most versions of BSD Unix use a different
error code for this: EWOULDBLOCK.  In the GNU C Library,
EWOULDBLOCK is an alias for EAGAIN, so it doesn’t matter
which name you use.

On some systems, reading a large amount of data from a character special
file can also fail with EAGAIN if the kernel cannot find enough
physical memory to lock down the user’s pages.  This is limited to
devices that transfer with direct memory access into the user’s memory,
which means it does not include terminals, since they always use
separate buffers inside the kernel.  This problem never happens on
GNU/Hurd systems.

Any condition that could result in EAGAIN can instead result in a
successful read which returns fewer bytes than requested.
Calling read again immediately would result in EAGAIN.


EBADF
The filedes argument is not a valid file descriptor,
or is not open for reading.


EINTR
read was interrupted by a signal while it was waiting for input.
See Interrupted Primitives.  A signal will not necessary cause
read to return EINTR; it may instead result in a
successful read which returns fewer bytes than requested.


EIO
For many devices, and for disk files, this error code indicates
a hardware error.

EIO also occurs when a background process tries to read from the
controlling terminal, and the normal action of stopping the process by
sending it a SIGTTIN signal isn’t working.  This might happen if
the signal is being blocked or ignored, or because the process group is
orphaned.  See Job Control, for more information about job control,
and Signal Handling, for information about signals.


EINVAL
In some systems, when reading from a character or block device, position
and size offsets must be aligned to a particular block size.  This error
indicates that the offsets were not properly aligned.



Please note that there is no function named read64.  This is not
necessary since this function does not directly modify or handle the
possibly wide file offset.  Since the kernel handles this state
internally, the read function can be used for all cases.

This function is a cancellation point in multi-threaded programs.  This
is a problem if the thread allocates some resources (like memory, file
descriptors, semaphores or whatever) at the time read is
called.  If the thread gets canceled these resources stay allocated
until the program ends.  To avoid this, calls to read should be
protected using cancellation handlers.

The read function is the underlying primitive for all of the
functions that read from streams, such as fgetc.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//I_002fO-Primitives.html#I_002fO-Primitives
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/I_002fO-Primitives/read.txt