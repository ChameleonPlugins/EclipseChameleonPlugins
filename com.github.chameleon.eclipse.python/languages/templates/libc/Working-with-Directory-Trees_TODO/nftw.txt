//\\ //// code completion entries (1+ lines):
works like (the,) ftw functions
//\\ //// ==> completion hint (1 line):
works like the ftw functions
//\\ //// Replacement text (1+ lines):
int nftw (X1, __nftw_func_t func, int descriptors, int flag)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):
X1="filename.txt"

//\\ //// Help/documentation (1+ lines):
Function: int nftw (const char *filename, __nftw_func_t func, int descriptors, int flag)
Preliminary:
| MT-Safe cwd
| AS-Unsafe heap
| AC-Unsafe mem fd cwd
| See POSIX Safety Concepts.


The nftw function works like the ftw functions.  They call
the callback function func for all items found in the directory
filename and below.  At most descriptors file descriptors
are consumed during the nftw call.

One difference is that the callback function is of a different type.  It
is of type struct FTW * and provides the callback function
with the extra information described above.

A second difference is that nftw takes a fourth argument, which
is 0 or a bitwise-OR combination of any of the following values.


FTW_PHYS


While traversing the directory symbolic links are not followed.  Instead
symbolic links are reported using the FTW_SL value for the type
parameter to the callback function.  If the file referenced by a
symbolic link does not exist FTW_SLN is returned instead.

FTW_MOUNT


The callback function is only called for items which are on the same
mounted filesystem as the directory given by the filename
parameter to nftw.

FTW_CHDIR


If this flag is given the current working directory is changed to the
directory of the reported object before the callback function is called.
When ntfw finally returns the current directory is restored to
its original value.

FTW_DEPTH


If this option is specified then all subdirectories and files within
them are processed before processing the top directory itself
(depth-first processing).  This also means the type flag given to the
callback function is FTW_DP and not FTW_D.

FTW_ACTIONRETVAL


If this option is specified then return values from callbacks
are handled differently.  If the callback returns FTW_CONTINUE,
walking continues normally.  FTW_STOP means walking stops
and FTW_STOP is returned to the caller.  If FTW_SKIP_SUBTREE
is returned by the callback with FTW_D argument, the subtree
is skipped and walking continues with next sibling of the directory.
If FTW_SKIP_SIBLINGS is returned by the callback, all siblings
of the current entry are skipped and walking continues in its parent.
No other return values should be returned from the callbacks if
this option is set.  This option is a GNU extension.



The return value is computed in the same way as for ftw.
nftw returns 0 if no failures occurred and all callback
functions returned 0.  In case of internal errors, such as memory
problems, the return value is -1 and errno is set
accordingly.  If the return value of a callback invocation was non-zero
then that value is returned.

When the sources are compiled with _FILE_OFFSET_BITS == 64 on a
32-bit system this function is in fact nftw64, i.e., the LFS
interface transparently replaces the old interface.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Working-with-Directory-Trees.html#Working-with-Directory-Trees
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Working-with-Directory-Trees/nftw.txt