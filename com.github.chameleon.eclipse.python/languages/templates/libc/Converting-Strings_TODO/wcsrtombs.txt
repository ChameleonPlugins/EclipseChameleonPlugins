//\\ //// code completion entries (1+ lines):
 (convert,change,replace) (the,) nul-terminated wide character (string,text) at * into (an,) equivalent multibyte character (string,text) and stores (the,) result in (the,) array pointed to by dst
//\\ //// ==> completion hint (1 line):
 converts the NUL-terminated wide character string at * into an equivalent multibyte character string and stores the result in the array pointed to by dst
//\\ //// Replacement text (1+ lines):
size_t size=wcsrtombs (char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: size_t wcsrtombs (char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps)
Preliminary:
| MT-Unsafe race:wcsrtombs/!ps
| AS-Unsafe corrupt heap lock dlopen
| AC-Unsafe corrupt lock mem fd
| See POSIX Safety Concepts.


The wcsrtombs function (“wide character string restartable to
multibyte string”) converts the NUL-terminated wide character string at
*src into an equivalent multibyte character string and
stores the result in the array pointed to by dst.  The NUL wide
character is also converted.  The conversion starts in the state
described in the object pointed to by ps or by a state object
locally to wcsrtombs in case ps is a null pointer.  If
dst is a null pointer, the conversion is performed as usual but the
result is not available.  If all characters of the input string were
successfully converted and if dst is not a null pointer, the
pointer pointed to by src gets assigned a null pointer.

If one of the wide characters in the input string has no valid multibyte
character equivalent, the conversion stops early, sets the global
variable errno to EILSEQ, and returns (size_t) -1.

Another reason for a premature stop is if dst is not a null
pointer and the next converted character would require more than
len bytes in total to the array dst.  In this case (and if
dest is not a null pointer) the pointer pointed to by src is
assigned a value pointing to the wide character right after the last one
successfully converted.

Except in the case of an encoding error the return value of the
wcsrtombs function is the number of bytes in all the multibyte
character sequences stored in dst.  Before returning the state in
the object pointed to by ps (or the internal object in case
ps is a null pointer) is updated to reflect the state after the
last conversion.  The state is the initial shift state in case the
terminating NUL wide character was converted.


The wcsrtombs function was introduced in Amendment 1 to
ISO C90 and is declared in wchar.h.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Converting-Strings.html#Converting-Strings
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Converting-Strings/wcsrtombs.txt