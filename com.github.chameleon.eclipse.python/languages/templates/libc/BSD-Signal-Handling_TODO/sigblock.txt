//\\ //// code completion entries (1+ lines):
is equivalent to sigprocmask with (a,) how argument of sig_block: it (add,append,construct,create,define,insert,make,push) (the,) signals specified by mask to (the,) calling process’s set of blocked signals
//\\ //// ==> completion hint (1 line):
is equivalent to sigprocmask with a how argument of SIG_BLOCK: it adds the signals specified by mask to the calling process’s set of blocked signals
//\\ //// Replacement text (1+ lines):
int sigblock (int mask)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int sigblock (int mask)
Preliminary:
| MT-Safe 
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See POSIX Safety Concepts.


This function is equivalent to sigprocmask (see Process Signal Mask) with a how argument of SIG_BLOCK: it adds the
signals specified by mask to the calling process’s set of blocked
signals.  The return value is the previous set of blocked signals.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//BSD-Signal-Handling.html#BSD-Signal-Handling
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/BSD-Signal-Handling/sigblock.txt