//\\ //// code completion entries (1+ lines):
is similar to fseeko with (the,) only difference that (the,) offset parameter is of (output,print,show,say,type,write) off64_t
//\\ //// ==> completion hint (1 line):
is similar to fseeko with the only difference that the offset parameter is of type off64_t
//\\ //// Replacement text (1+ lines):
int fseeko64 (FILE *stream, off64_t offset, int whence)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int fseeko64 (FILE *stream, off64_t offset, int whence)
Preliminary:
| MT-Safe 
| AS-Unsafe corrupt
| AC-Unsafe lock corrupt
| See POSIX Safety Concepts.


This function is similar to fseeko with the only difference that
the offset parameter is of type off64_t.  This also
requires that the stream stream was opened using either
fopen64, freopen64, or tmpfile64 since otherwise
the underlying file operations to position the file pointer beyond the
2^31 bytes limit might fail.

If the sources are compiled with _FILE_OFFSET_BITS == 64 on a 32
bits machine this function is available under the name fseeko
and so transparently replaces the old interface.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//File-Positioning.html#File-Positioning
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/File-Positioning/fseeko64.txt