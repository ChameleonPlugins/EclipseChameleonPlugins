//\\ //// code completion entries (1+ lines):
computes (the,) quotient and remainder from (the,) division of numerator by denominator, returning (the,) result in (a,) structure of (output,print,show,say,type,write) div_t
//\\ //// ==> completion hint (1 line):
computes the quotient and remainder from the division of numerator by denominator, returning the result in a structure of type div_t
//\\ //// Replacement text (1+ lines):
div_t div (int numerator, int denominator)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: div_t div (int numerator, int denominator)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


This function div computes the quotient and remainder from
the division of numerator by denominator, returning the
result in a structure of type div_t.

If the result cannot be represented (as in a division by zero), the
behavior is undefined.

Here is an example, albeit not a very useful one.


div_t result;
result = div (20, -6);


Now result.quot is -3 and result.rem is 2.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Integer-Division.html#Integer-Division
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Integer-Division/div.txt