//\\ //// code completion entries (1+ lines):
scans (the,) group database for all (the,) groups user belongs to
//\\ //// ==> completion hint (1 line):
scans the group database for all the groups user belongs to
//\\ //// Replacement text (1+ lines):
int getgrouplist (const char *user, gid_t group, gid_t *groups, int *ngroups)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int getgrouplist (const char *user, gid_t group, gid_t *groups, int *ngroups)
Preliminary:
| MT-Safe locale
| AS-Unsafe dlopen plugin heap lock
| AC-Unsafe corrupt mem fd lock
| See POSIX Safety Concepts.


The getgrouplist function scans the group database for all the
groups user belongs to.  Up to *ngroups group IDs
corresponding to these groups are stored in the array groups; the
return value from the function is the number of group IDs actually
stored.  If *ngroups is smaller than the total number of groups
found, then getgrouplist returns a value of -1 and stores
the actual number of groups in *ngroups.  The group group is
automatically included in the list of groups returned by
getgrouplist.

Here’s how to use getgrouplist to read all supplementary groups
for user:


gid_t *
supplementary_groups (char *user)
{
  int ngroups = 16;
  gid_t *groups
    = (gid_t *) xmalloc (ngroups * sizeof (gid_t));
  struct passwd *pw = getpwnam (user);

  if (pw == NULL)
    return NULL;

  if (getgrouplist (pw-&gt;pw_name, pw-&gt;pw_gid, groups, &amp;ngroups) &lt; 0)
    {
      groups = xrealloc (ngroups * sizeof (gid_t));
      getgrouplist (pw-&gt;pw_name, pw-&gt;pw_gid, groups, &amp;ngroups);
    }
  return groups;
}
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Setting-Groups.html#Setting-Groups
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Setting-Groups/getgrouplist.txt