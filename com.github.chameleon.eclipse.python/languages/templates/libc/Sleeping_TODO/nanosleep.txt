//\\ //// code completion entries (1+ lines):
if resolution to seconds is not enough (the,) nanosleep function can be used
//\\ //// ==> completion hint (1 line):
If resolution to seconds is not enough the nanosleep function can be used
//\\ //// Replacement text (1+ lines):
int nanosleep (const struct timespec *requested_time, struct timespec *remaining)
//\\ //// Default Values, if needed (e.g. X1=x>0) (1+ lines):

//\\ //// Help/documentation (1+ lines):
Function: int nanosleep (const struct timespec *requested_time, struct timespec *remaining)
Preliminary:
| MT-Safe 
| AS-Safe 
| AC-Safe 
| See POSIX Safety Concepts.


If resolution to seconds is not enough the nanosleep function can
be used.  As the name suggests the sleep interval can be specified in
nanoseconds.  The actual elapsed time of the sleep interval might be
longer since the system rounds the elapsed time you request up to the
next integer multiple of the actual resolution the system can deliver.

*requested_time is the elapsed time of the interval you want to
sleep.

The function returns as *remaining the elapsed time left in the
interval for which you requested to sleep.  If the interval completed
without getting interrupted by a signal, this is zero.

struct timespec is described in See Elapsed Time.

If the function returns because the interval is over the return value is
zero.  If the function returns -1 the global variable errno
is set to the following values:


EINTR
The call was interrupted because a signal was delivered to the thread.
If the remaining parameter is not the null pointer the structure
pointed to by remaining is updated to contain the remaining
elapsed time.


EINVAL
The nanosecond value in the requested_time parameter contains an
illegal value.  Either the value is negative or greater than or equal to
1000 million.



This function is a cancellation point in multi-threaded programs.  This
is a problem if the thread allocates some resources (like memory, file
descriptors, semaphores or whatever) at the time nanosleep is
called.  If the thread gets canceled these resources stay allocated
until the program ends.  To avoid this calls to nanosleep should
be protected using cancellation handlers.

The nanosleep function is declared in time.h.
file:///C:/My%20Web%20Sites/C-language/C-libC_pages/www.gnu.org/software/libc/manual/html_node//Sleeping.html#Sleeping
//\\ //// Tool tip (1 line):

//\\ //// Template path (e.g. core/sayHi.txt) (1 line):
/../../../templates/libc/Sleeping/nanosleep.txt